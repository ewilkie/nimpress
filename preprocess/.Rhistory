colnames(test_file)[beta.ind] <- "Effect.size"
}
arguments$input
arguments$input <- "Example/Evans_Scott_2014_Table1.csv"
test_file <- read.table(arguments$input, sep=",", header=T)
getwd
getwd()
list.files(path="/Users/ewilkie/Documents/Work/CCI/Polygenic/nimpress/preprocess/Example")
arguments$input <- "Example/Example_File_to_process.csv"
test_file <- read.table(arguments$input, sep=",", header=T)
## remove blank rows
blank <- which(test_file[,1] == "")
na <- which(is.na(test_file[,1]))
rm_blank <- c(blank, na)
if(length(rm_blank) > 0){
test_file <- test_file[-rm_blank,]
}
## remove blank columns
if(ncol(test_file) > 6){
test_file <- test_file[,-(7:ncol(test_file))]
}
## remove all leading and trailing blank spaces
test_file <- as.data.frame(apply(test_file,2,function(x)gsub('\\s+', '',x)))
at Effect size
## if OR
or.ind <- grep("OR", colnames(test_file))
beta.ind <- grep("Beta", colnames(test_file))
if(length(or.ind) == 1){
OR <- as.vector(test_file[,or.ind])
test_file[,or.ind] <- log(as.numeric(sub('\\(.*', '', OR)))
colnames(test_file)[or.ind] <- "Effect.size"
}else if(length(beta.ind) == 1){
colnames(test_file)[beta.ind] <- "Effect.size"
}
## extract unique rsID
rsID_ind <- grep("rsID", colnames(test_file))
rsID <- test_file[,rsID_ind]
rsIDu <- as.vector(unique(rsID))
#rsid_input <- rsIDu[rsid]
getrsID_info <- function(rsid_input){
## return two lists
final_snp <- list()
snp_term <- paste(rsid_input, "[RS]", sep="")
r_search <- entrez_search(db="snp", term=snp_term)
multi_summs <- entrez_summary(db="snp", id=r_search$id)
## get the unique SNP_ID
uid <- unique(extract_from_esummary(multi_summs, c("snp_id")))
all_recs <- entrez_fetch(db="snp", id=uid, rettype="xml")
tax_list <- XML::xmlToList(all_recs)
## extract assembly, genome position and variant details
g1 <- gsub("^[A-Za-z]*=", "", tax_list$DocumentSummary$DOCSUM)
g2 <- strsplit(g1,"\\|")
g3 <- as.data.frame(strsplit(g2[[1]][1],",")[[1]])
colnames(g3) <- "ID"
g4 <- apply(g3, 2, function(x) strsplit(x,":g\\."))
g5 <- as.data.frame(do.call(rbind, g4$ID),stringsAsFactors=FALSE)
colnames(g5) <- c("assembly", "START")
g6 <- strsplit(g5$START,"[0-9]")
g7 <- unlist(lapply(g6,function(x) x[length(x)]))
g8 <- do.call(rbind, strsplit(g7, ">"))
g9 <- cbind(g5,g8)
rmg <- gsub("[^0-9]", "", g9$START)
g9$START <- rmg
## can't remember why this is in here
if(!is.null(g9$g8)){
g9 <- g9[-which(g9$g8 == "del"),]
}
## check if there are no mutations
if(nrow(g9) == 0 ){
return(NA)
}else{
g10 <- g9
colnames(g10)[3:4] <- c("REF_Allele","ALT_Allele")
## subset to only NC
g11 <- g10[grep("^NC",  g10[,1]),]
## extract CHR
g12 <- gsub("NC_0+","",g11[,1])
CHR <- gsub("\\.[0-9]*", "", g12)
g13 <- data.frame(g11$assembly, CHR, g11$START, g11$REF_Allele, g11$ALT_Allele)
## Get right Assembly from SNP
inter <- intersect(g13[,1], assembly[,2])
g14 <- unique(g13[grep(inter,g13[,1]),])
g15 <- g14[,-1]
## multiple Alt Alleles are on different lines
g16<- cbind(rsid_input, g15)
colnames(g16) <- c("rsID", "CHR", "START", "REF.ALLELE", "ALT.ALLELE")
final_snp$all.alleles <- g16
g17 <-c(as.vector(unique(g16$CHR)), as.vector(unique(g16$START)), rsid_input)
final_snp$rsID.loc <- g17
return(final_snp)
}
}
## list containing "rsID", "CHR", "START", "REF.ALLELE", "ALT.ALLELE" - for Risk allele check
rsID_genome <- list()
## list containing chr, start, rsid for coverage check
### need to fix this since res has lenght 2
rsID_loc <- list()
for (rsid in 1: length(rsIDu)){
res <- getrsID_info(rsIDu[rsid])
if(!is.na(res)){
rsID_loc[[rsid]] <- res$rsID.loc
rsID_genome[[rsid]] <- res$all.allele
}
}
rsID_loc_df <- do.call(rbind, rsID_loc)
colnames(rsID_loc_df) <- c("CHR","START","rsID")
urer <- rsID_loc_df
rsID_genome_df <- do.call(rbind, rsID_genome)
rsID_genome <- list()
## list containing chr, start, rsid for coverage check
### need to fix this since res has lenght 2
rsID_loc <- list()
for (rsid in 1: length(rsIDu)){
res <- getrsID_info(rsIDu[rsid])
if(!is.na(res)){
rsID_loc[[rsid]] <- res$rsID.loc
rsID_genome[[rsid]] <- res$all.allele
}
}
arguments$input <- "/Users/ewilkie/Documents/Work/CCI/Polygenic/Nimpress_preprocess/preprocess_old/Data/Evans_Scott_2014_Table1.csv"
test_file <- read.table(arguments$input, sep=",", header=T)
## remove blank rows
blank <- which(test_file[,1] == "")
na <- which(is.na(test_file[,1]))
rm_blank <- c(blank, na)
if(length(rm_blank) > 0){
test_file <- test_file[-rm_blank,]
}
## remove blank columns
if(ncol(test_file) > 6){
test_file <- test_file[,-(7:ncol(test_file))]
}
## remove all leading and trailing blank spaces
test_file <- as.data.frame(apply(test_file,2,function(x)gsub('\\s+', '',x)))
## if OR
or.ind <- grep("OR", colnames(test_file))
beta.ind <- grep("Beta", colnames(test_file))
if(length(or.ind) == 1){
OR <- as.vector(test_file[,or.ind])
test_file[,or.ind] <- log(as.numeric(sub('\\(.*', '', OR)))
colnames(test_file)[or.ind] <- "Effect.size"
}else if(length(beta.ind) == 1){
colnames(test_file)[beta.ind] <- "Effect.size"
}
## extract unique rsID
rsID_ind <- grep("rsID", colnames(test_file))
rsID <- test_file[,rsID_ind]
rsIDu <- as.vector(unique(rsID))
#rsid_input <- rsIDu[rsid]
getrsID_info <- function(rsid_input){
## return two lists
final_snp <- list()
snp_term <- paste(rsid_input, "[RS]", sep="")
r_search <- entrez_search(db="snp", term=snp_term)
multi_summs <- entrez_summary(db="snp", id=r_search$id)
## get the unique SNP_ID
uid <- unique(extract_from_esummary(multi_summs, c("snp_id")))
all_recs <- entrez_fetch(db="snp", id=uid, rettype="xml")
tax_list <- XML::xmlToList(all_recs)
## extract assembly, genome position and variant details
g1 <- gsub("^[A-Za-z]*=", "", tax_list$DocumentSummary$DOCSUM)
g2 <- strsplit(g1,"\\|")
g3 <- as.data.frame(strsplit(g2[[1]][1],",")[[1]])
colnames(g3) <- "ID"
g4 <- apply(g3, 2, function(x) strsplit(x,":g\\."))
g5 <- as.data.frame(do.call(rbind, g4$ID),stringsAsFactors=FALSE)
colnames(g5) <- c("assembly", "START")
g6 <- strsplit(g5$START,"[0-9]")
g7 <- unlist(lapply(g6,function(x) x[length(x)]))
g8 <- do.call(rbind, strsplit(g7, ">"))
g9 <- cbind(g5,g8)
rmg <- gsub("[^0-9]", "", g9$START)
g9$START <- rmg
## can't remember why this is in here
if(!is.null(g9$g8)){
g9 <- g9[-which(g9$g8 == "del"),]
}
## check if there are no mutations
if(nrow(g9) == 0 ){
return(NA)
}else{
g10 <- g9
colnames(g10)[3:4] <- c("REF_Allele","ALT_Allele")
## subset to only NC
g11 <- g10[grep("^NC",  g10[,1]),]
## extract CHR
g12 <- gsub("NC_0+","",g11[,1])
CHR <- gsub("\\.[0-9]*", "", g12)
g13 <- data.frame(g11$assembly, CHR, g11$START, g11$REF_Allele, g11$ALT_Allele)
## Get right Assembly from SNP
inter <- intersect(g13[,1], assembly[,2])
g14 <- unique(g13[grep(inter,g13[,1]),])
g15 <- g14[,-1]
## multiple Alt Alleles are on different lines
g16<- cbind(rsid_input, g15)
colnames(g16) <- c("rsID", "CHR", "START", "REF.ALLELE", "ALT.ALLELE")
final_snp$all.alleles <- g16
g17 <-c(as.vector(unique(g16$CHR)), as.vector(unique(g16$START)), rsid_input)
final_snp$rsID.loc <- g17
return(final_snp)
}
}
## list containing "rsID", "CHR", "START", "REF.ALLELE", "ALT.ALLELE" - for Risk allele check
rsID_genome <- list()
## list containing chr, start, rsid for coverage check
### need to fix this since res has lenght 2
rsID_loc <- list()
for (rsid in 1: length(rsIDu)){
res <- getrsID_info(rsIDu[rsid])
if(!is.na(res)){
rsID_loc[[rsid]] <- res$rsID.loc
rsID_genome[[rsid]] <- res$all.allele
}
}
rsID_loc_df <- do.call(rbind, rsID_loc)
colnames(rsID_loc_df) <- c("CHR","START","rsID")
urer <- rsID_loc_df
rsID_genome_df <- do.call(rbind, rsID_genome)
get_cov <- function(urer,s){
snp <- GRanges(seqnames=as.numeric(urer[s,1]), ranges=IRanges(start=as.numeric(urer[s,2]), end=as.numeric(urer[s,2])))
hits <- findOverlaps(gr,snp)
if(length(hits@from) > 0){
cov = TRUE
}else{
cov = FALSE
}
return(cov)
}
ela <- Sys.time()
if(arguments$bed == "NULL"){
cov <- TRUE
urercov <- cbind(urer, cov)
}else{
urer <- rsID_loc_df
cov <- vector()
for (s in 1:nrow(urer)){
nc <- get_cov(urer,s)
cov <- c(cov, nc)
}
urercov <- cbind(urer, cov)
}
ela <- Sys.time() - ela
print(ela)
## this is for getLDproxy function
original_SNP <- urercov[,"rsID"]
'%!in%' <- function(x,y)!('%in%'(x,y))
getLDproxy <- function(snp){
## for breaking
new_rd <- TRUE
## run Query
my_proxies <- LDproxy(snp, pop = "GBR", r2d = "r2", token = "cbe1b45bc8be", file = FALSE)
## extract only those with R2 >= 0.9
my_proxies_keep <- my_proxies[which(my_proxies$R2 >= 0.9),c(1,2,3)]
## remove those without rs number
my_proxies_keep2 <- my_proxies_keep[grep("rs", my_proxies_keep$RS_Number),]
## remove those that are already in the dataset
my_proxies_keep3 <- my_proxies_keep2[-which(my_proxies_keep2$RS_Number %in% original_SNP),]
## if no proxies
if(nrow(my_proxies_keep3) == 0){
new_rd <- NA
}else{
## split coords
coord <- sub(".*:(\\d+).*", "\\1", my_proxies_keep3$Coord)
coord_check <- paste(my_proxies_keep3$Coord , "-" , coord, sep="")
for(i in 1:length(coord_check)){
if(arguments$bed == "NULL"){
getALT <- getrsID_info(my_proxies_keep3[i,1])
if(!is.na(getALT)){
ALTcol <- paste(sort(as.vector(getALT$all.alleles$ALT.ALLELE)), collapse=",")
Alleles <- paste("(", unique(as.vector(getALT$all.alleles$REF.ALLELE)) , "/", ALTcol, ")", sep="")
new_rd <- c(as.matrix(my_proxies_keep3[i,1:2]), Alleles)
rsid_keep <- c(rsid_keep,as.vector(my_proxies_keep3[i,"RS_Number"]))
break
}else{
next
}
}else{
coord <- coord_check[i]
snp_chr <- sub("chr","" , sub('\\:.*', '', coord))
start <- as.numeric(sub("\\-.*", "", sub('.*\\:', '', coord)))
snp <- GRanges(seqnames=snp_chr, ranges=IRanges(start=start, end=start))
hits <- findOverlaps(gr,snp)
if(length(hits@from) > 0){
if(as.vector(my_proxies_keep3[i,"RS_Number"]) %!in% rsid_keep){
## need to get all alternative allelse fot this new rsID
getALT <- getrsID_info(as.vector(my_proxies_keep3[i,1]))
if(!is.na(getALT)){
ALTcol <- paste(sort(as.vector(getALT$all.alleles$ALT.ALLELE)), collapse=",")
Alleles <- paste("(", unique(as.vector(getALT$all.alleles$REF.ALLELE)) , "/", ALTcol, ")", sep="")
new_rd <- c(as.matrix(my_proxies_keep3[i,1:2]), Alleles)
rsid_keep <- c(rsid_keep,as.vector(my_proxies_keep3[i,"RS_Number"]))
break
}else{
next
}
}
}else{
new_rd <- NA
}
}
}
}
return(new_rd)
}
rsid_keep <- vector()
LDres <- list()
for(n in 1:nrow(urercov)){
if(urercov[n,4] == "FALSE"){
LD <- getLDproxy(as.vector(urercov[n,3]))
if (length(LD) == 3){
coord <- strsplit(as.vector(LD[2]), ":")[[1]]
j <- as.vector(LD[3])
all <- regmatches(j, gregexpr("(?<=\\().*?(?=\\))", j, perl=T))[[1]]
ref <- strsplit(all, "/")[[1]][1]
alt <- strsplit(all, "/")[[1]][2]
res <- c(as.vector(LD[1]), gsub("chr", "", coord[1]), coord[2], ref, alt)
LDres[[n]] <- res
rsid_keep <- c(rsid_keep, as.vector(LD[1]))
}else if(is.na(LD)) {
LDres[[n]] <- NA
}
}else{
LDres[[n]] <- NA
}
}
## Get assembly info
## Instead downloaded file from: https://www.ncbi.nlm.nih.gov/assembly/GCF_000001405.13
ass <- read.table(assembly_file, header=F, sep="\t")
ass_sub <- ass[,c(3,7)]
assembly <- ass_sub[grep("NC_", ass_sub[,2]),]
## optional bed file
if(arguments$bed != "NULL"){
## use granges to check for bed in range
bedfile <- arguments$bed
ovlp <- read.table(bedfile, header = FALSE, stringsAsFactors = FALSE);
colnames(ovlp) <- c("chr", "start", "end")
gr <- makeGRangesFromDataFrame(ovlp, keep.extra.columns = TRUE)
}
test_file <- read.table(arguments$input, sep=",", header=T)
## remove blank rows
blank <- which(test_file[,1] == "")
na <- which(is.na(test_file[,1]))
rm_blank <- c(blank, na)
if(length(rm_blank) > 0){
test_file <- test_file[-rm_blank,]
}
## rmeove blank columns
if(ncol(test_file) > 6){
test_file <- test_file[,-(7:ncol(test_file))]
}
## remove all leading and trailing blank spaces
test_file <- as.data.frame(apply(test_file,2,function(x)gsub('\\s+', '',x)))
## if OR
or.ind <- grep("OR", colnames(test_file))
beta.ind <- grep("Beta", colnames(test_file))
if(length(or.ind) == 1){
OR <- as.vector(test_file[,or.ind])
test_file[,or.ind] <- log(as.numeric(sub('\\(.*', '', OR)))
colnames(test_file)[or.ind] <- "Effect.size"
}else if(length(beta.ind) == 1){
colnames(test_file)[beta.ind] <- "Effect.size"
}
## extract unique rsID
rsID_ind <- grep("rsID", colnames(test_file))
rsID <- test_file[,rsID_ind]
rsIDu <- as.vector(unique(rsID))
getrsID_info <- function(rsid_input){
## return two lists
final_snp <- list()
snp_term <- paste(rsid_input, "[RS]", sep="")
r_search <- entrez_search(db="snp", term=snp_term)
multi_summs <- entrez_summary(db="snp", id=r_search$id)
## get the unique SNP_ID
uid <- unique(extract_from_esummary(multi_summs, c("snp_id")))
all_recs <- entrez_fetch(db="snp", id=uid, rettype="xml")
tax_list <- XML::xmlToList(all_recs)
## extract assembly, genome position and variant details
g1 <- gsub("^[A-Za-z]*=", "", tax_list$DocumentSummary$DOCSUM)
g2 <- strsplit(g1,"\\|")
g3 <- as.data.frame(strsplit(g2[[1]][1],",")[[1]])
colnames(g3) <- "ID"
g4 <- apply(g3, 2, function(x) strsplit(x,":g\\."))
g5 <- as.data.frame(do.call(rbind, g4$ID),stringsAsFactors=FALSE)
colnames(g5) <- c("assembly", "START")
g6 <- strsplit(g5$START,"[0-9]")
g7 <- unlist(lapply(g6,function(x) x[length(x)]))
g8 <- do.call(rbind, strsplit(g7, ">"))
g9 <- cbind(g5,g8)
rmg <- gsub("[^0-9]", "", g9$START)
g9$START <- rmg
if(!is.null(g9$g8)){
g9 <- g9[-which(g9$g8 == "del"),]
}
if(nrow(g9) == 0 ){
return(NA)
}else{
g10 <- g9
colnames(g10)[3:4] <- c("REF_Allele","ALT_Allele")
## subset to only NC
g11 <- g10[grep("^NC",  g10[,1]),]
## extract CHR
g12 <- gsub("NC_0+","",g11[,1])
CHR <- gsub("\\.[0-9]*", "", g12)
g13 <- data.frame(g11$assembly, CHR, g11$START, g11$REF_Allele, g11$ALT_Allele)
## Get right Assembly from SNP
inter <- intersect(g13[,1], assembly[,2])
g14 <- unique(g13[grep(inter,g13[,1]),])
g15 <- g14[,-1]
## multiple Alt Alleles are on different lines
g16<- cbind(rsid_input, g15)
colnames(g16) <- c("rsID", "CHR", "START", "REF.ALLELE", "ALT.ALLELE")
final_snp$all.alleles <- g16
g17 <-c(as.vector(unique(g16$CHR)), as.vector(unique(g16$START)), rsid_input)
final_snp$rsID.loc <- g17
return(final_snp)
}
}
## list containing "rsID", "CHR", "START", "REF.ALLELE", "ALT.ALLELE" - for Risk allele check
rsID_genome <- list()
## list containing chr, start, rsid for coverage check
rsID_loc <- list()
for (rsid in 1: length(rsIDu)){
res <- getrsID_info(rsIDu[rsid])
if(!is.na(res)){
rsID_loc[[rsid]] <- res$rsID.loc
rsID_genome[[rsid]] <- res$all.allele
}
}
rsID_loc_df <- do.call(rbind, rsID_loc)
colnames(rsID_loc_df) <- c("CHR","START","rsID")
urer <- rsID_loc_df
rsID_genome_df <- do.call(rbind, rsID_genome)
'%!in%' <- function(x,y)!('%in%'(x,y))
getLDproxy <- function(snp){
## for breaking
new_rd <- TRUE
## run Query
my_proxies <- LDproxy(snp, pop = "GBR", r2d = "r2", token = "cbe1b45bc8be", file = FALSE)
## extract only those with R2 >= 0.9
my_proxies_keep <- my_proxies[which(my_proxies$R2 >= 0.9),c(1,2,3)]
## remove those without rs number
my_proxies_keep2 <- my_proxies_keep[grep("rs", my_proxies_keep$RS_Number),]
## remove those that are already in the dataset
my_proxies_keep3 <- my_proxies_keep2[-which(my_proxies_keep2$RS_Number %in% original_SNP),]
## if no proxies
if(nrow(my_proxies_keep3) == 0){
new_rd <- NA
}else{
## split coords
coord <- sub(".*:(\\d+).*", "\\1", my_proxies_keep3$Coord)
coord_check <- paste(my_proxies_keep3$Coord , "-" , coord, sep="")
for(i in 1:length(coord_check)){
if(arguments$bed == "NULL"){
getALT <- getrsID_info(my_proxies_keep3[i,1])
if(!is.na(getALT)){
ALTcol <- paste(sort(as.vector(getALT$all.alleles$ALT.ALLELE)), collapse=",")
Alleles <- paste("(", unique(as.vector(getALT$all.alleles$REF.ALLELE)) , "/", ALTcol, ")", sep="")
new_rd <- c(as.matrix(my_proxies_keep3[i,1:2]), Alleles)
rsid_keep <- c(rsid_keep,as.vector(my_proxies_keep3[i,"RS_Number"]))
break
}else{
next
}
}else{
coord <- coord_check[i]
snp_chr <- sub("chr","" , sub('\\:.*', '', coord))
start <- as.numeric(sub("\\-.*", "", sub('.*\\:', '', coord)))
snp <- GRanges(seqnames=snp_chr, ranges=IRanges(start=start, end=start))
hits <- findOverlaps(gr,snp)
if(length(hits@from) > 0){
if(as.vector(my_proxies_keep3[i,"RS_Number"]) %!in% rsid_keep){
## need to get all alternative allelse fot this new rsID
getALT <- getrsID_info(as.vector(my_proxies_keep3[i,1]))
if(!is.na(getALT)){
ALTcol <- paste(sort(as.vector(getALT$all.alleles$ALT.ALLELE)), collapse=",")
Alleles <- paste("(", unique(as.vector(getALT$all.alleles$REF.ALLELE)) , "/", ALTcol, ")", sep="")
new_rd <- c(as.matrix(my_proxies_keep3[i,1:2]), Alleles)
rsid_keep <- c(rsid_keep,as.vector(my_proxies_keep3[i,"RS_Number"]))
break
}else{
next
}
}
}else{
new_rd <- NA
}
}
}
}
return(new_rd)
}
rsid_keep <- vector()
LDres <- list()
for(n in 1:nrow(urercov)){
if(urercov[n,4] == "FALSE"){
LD <- getLDproxy(as.vector(urercov[n,3]))
if (length(LD) == 3){
coord <- strsplit(as.vector(LD[2]), ":")[[1]]
j <- as.vector(LD[3])
all <- regmatches(j, gregexpr("(?<=\\().*?(?=\\))", j, perl=T))[[1]]
ref <- strsplit(all, "/")[[1]][1]
alt <- strsplit(all, "/")[[1]][2]
res <- c(as.vector(LD[1]), gsub("chr", "", coord[1]), coord[2], ref, alt)
LDres[[n]] <- res
rsid_keep <- c(rsid_keep, as.vector(LD[1]))
}else if(is.na(LD)) {
LDres[[n]] <- NA
}
}else{
LDres[[n]] <- NA
}
}
