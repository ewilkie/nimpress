## check whether REF is forwards or reverse strand (same as SEQ)
if(SNP_info[rs,"REF.ALLELE"] == SNP_info[rs,"SEQ"]){
strand[[rs]] <- "+"
} else if(SNP_info[rs,"REF.ALLELE"] == complement(SNP_info[rs,"SEQ"])){
strand[[rs]] <- "-"
} else{
strand[[rs]] <- NA
}
if(length(stp[[rs]]) == 1 && complement(SNP_info[rs,"REF.ALLELE"]) == stp[[rs]]){
ambig[[rs]] <- "Y"
}else if (length(stp[[rs]]) > 1 && complement(SNP_info[rs,"REF.ALLELE"]) %in% stp[[rs]]){
ambig[[rs]] <- "D"
}else{
ambig[[rs]] <- "N"
}
}
SNP_is <- cbind(SNP_info, strand=unlist(strand), ambiguous= unlist(ambig))
SNP_is
rsm <- merge(SNP_is, gf_ok[,c("rsID","Risk_allele")], by="rsID")
stp2 <- strsplit(rsm$ALT.ALLELE, "|")
risk_type <- list()
flipped <- list()
for(rll in 1:nrow(rsm)){
## if REF and ALT are ambiguous, then the risk_type and flipped are NA
if(rsm[rll, "ambiguous"] == "Y"){
risk_type[[rll]] = NA
flipped[[rll]] = NA
}
## if ambigious flag is D or N - first check for ambigious then for check type and flipped
else{
if(rsm[rll,"Risk_allele"] == complement(rsm[rll,"REF.ALLELE"]) & rsm[rll,"Risk_allele"] %in% stp2[[rll]]){
risk_type[[rll]] = NA
flipped[[rll]] = NA
rsm[rll,"ambiguous"] = "Y"
}
# Risk == REF and  == complemnt(ALT)
# same as complment(risk) == complment(REF) & ALT
else if(complement(rsm[rll,"Risk_allele"]) == complement(rsm[rll,"REF.ALLELE"]) & complement(rsm[rll,"Risk_allele"]) %in% stp2[[rll]]){
risk_type[[rll]] = NA
flipped[[rll]] = NA
rsm[rll,"ambiguous"] = "Y"
}
else if(rsm[rll,"Risk_allele"] == rsm[rll,"REF.ALLELE"]){
risk_type[[rll]] = "REF"
flipped[[rll]] = "N"
rsm[rll,"ambiguous"] = "N"
}else if (rsm[rll,"Risk_allele"] %in% stp2[[rll]]){
risk_type[[rll]] = "ALT"
flipped[[rll]] = "N"
rsm[rll,"ambiguous"] = "N"
## complement means flipped
}else if(complement(rsm[rll,"Risk_allele"]) == rsm[rll,"REF.ALLELE"]){
risk_type[[rll]] = "REF"
flipped[[rll]] = "Y"
rsm[rll,"ambiguous"] = "N"
}else if (complement(rsm[rll,"Risk_allele"]) %in% stp2[[rll]]){
risk_type[[rll]] = "ALT"
flipped[[rll]] = "Y"
rsm[rll,"ambiguous"] = "N"
}
}
}
SNP_fin <- cbind(rsm, risk_type=unlist(risk_type), flipped=unlist(flipped))
SNP_fin
if(bedfile == "NULL"){
bedcov <- FALSE
urercov <- cbind(SNP_fin, bedcov)
}else{
bedcov <- vector()
for (s in 1:nrow(SNP_fin)){
nc <- get_cov(SNP_fin[s,])
bedcov <- c(bedcov, nc)
}
urercov <- cbind(SNP_fin, bedcov)
}
## only run LDproxy on unique results for those that don't have coverage or are ambigious
run_ind <- which(urercov$bedcov == TRUE & urercov$ambiguous != "Y")
ldproxy_input <- unique(urercov[run_ind,"rsID"])
## to keep track of which RSids are already in DF, without expanding loop
SNP_kept <- unique(urercov[-run_ind,"rsID"])
if(length(ldproxy_input) > 0){
ldproxy_ls <- list()
for(s in 1:length(ldproxy_input)){
## need to implement collapse of duplicate alt alleles -
ldproxy_res <- getLDproxy(ldproxy_input[s], arguments$LDproxy_pop, arguments$LDproxy_token, SNP_kept)
## if results is NA add it anyways for later removal
if(is.na(ldproxy_res$RSID_Proxy)[1]){
ldproxy_res_keep <- ldproxy_res
}else{
## check which not in dataset
wni <- which(ldproxy_res$RSID_Proxy %!in% SNP_kept)
if(length(wni) == 0){
ldproxy_res_keep <- LDproxy_NA_res(ldproxy_input[s])
}else{
## keep one result only that is not already in dataset
ldproxy_res_keep <- ldproxy_res[wni[1],]
## this is so that no duplicates appear in the data
SNP_kept <- c(SNP_kept,ldproxy_res_keep$RSID_Proxy)
}
}
## combine ldproxy_res with orignal input - use all to get also those that return NA for proxy to later filter
mres <- merge(urercov, ldproxy_res_keep, by.x="rsID", by.y="RSID_input", all=T)
ldproxy_ls[[s]] <- mres
}
{{{}}}
}}
## only run LDproxy on unique results for those that don't have coverage or are ambigious
run_ind <- which(urercov$bedcov == TRUE & urercov$ambiguous != "Y")
ldproxy_input <- unique(urercov[run_ind,"rsID"])
## to keep track of which RSids are already in DF, without expanding loop
SNP_kept <- unique(urercov[-run_ind,"rsID"])
if(length(ldproxy_input) > 0){
ldproxy_ls <- list()
for(s in 1:length(ldproxy_input)){
## need to implement collapse of duplicate alt alleles -
ldproxy_res <- getLDproxy(ldproxy_input[s], arguments$LDproxy_pop, arguments$LDproxy_token, SNP_kept)
## if results is NA add it anyways for later removal
if(is.na(ldproxy_res$RSID_Proxy)[1]){
ldproxy_res_keep <- ldproxy_res
}else{
## check which not in dataset
wni <- which(ldproxy_res$RSID_Proxy %!in% SNP_kept)
if(length(wni) == 0){
ldproxy_res_keep <- LDproxy_NA_res(ldproxy_input[s])
}else{
## keep one result only that is not already in dataset
ldproxy_res_keep <- ldproxy_res[wni[1],]
## this is so that no duplicates appear in the data
SNP_kept <- c(SNP_kept,ldproxy_res_keep$RSID_Proxy)
}
}
## combine ldproxy_res with orignal input - use all to get also those that return NA for proxy to later filter
mres <- merge(urercov, ldproxy_res_keep, by.x="rsID", by.y="RSID_input", all=T)
ldproxy_ls[[s]] <- mres
}
LDproxy_df <- do.call(rbind, ldproxy_ls)
LDproxy_in <- LDproxy_df[!is.na(LDproxy_df$RSID_Proxy),]
## format results that don't have bedcov
nocov_padd <- cbind(urercov[-run_ind,],NA,NA,NA,NA,NA)
colnames(nocov_padd) <- c("rsID", "CHR.x", "START.x", "REF.ALLELE.x", "ALT.ALLELE.x", "SEQ", "strand", "ambiguous", "Risk_allele", "risk_type", "flipped", "bedcov", "RSID_Proxy", "CHR.y", "START.y", "REF.ALLELE.y", "ALT.ALLELE.y")
## final output
LDproxy_out <- rbind(nocov_padd, LDproxy_in)
}else{
nocov_padd <- cbind(urercov,NA,NA,NA,NA,NA)
colnames(nocov_padd) <- c("rsID", "CHR.x", "START.x", "REF.ALLELE.x", "ALT.ALLELE.x", "SEQ", "strand", "ambiguous", "Risk_allele", "risk_type", "flipped", "bedcov", "RSID_Proxy", "CHR.y", "START.y", "REF.ALLELE.y", "ALT.ALLELE.y")
## final output
LDproxy_out <- nocov_padd
}
arguments$offset
arguments <- list()
arguments$offset
is.null(arguments$offset)
if(is.null(arguments$offset)){
offset <- 0
}else{
offset <- arguments$offset
}
offset
## seperte kept from removed
interm_keep <-  interm[interm$FLAG.RM == "N",]
interm_keep
## add initially removed
rs.rm
intermo
intermo
LDproxyf
LDproxy_out
gf_ok
gf_ok[,c("rsID","Freq","Effect.size","P")]
LDproxyf <- merge(LDproxy_outlf, gf_ok[,c("rsID","Freq","Effect.size")], by="rsID")
LDproxyf
LDproxy_out
rs.rm
LDproxy_out
merge(LDproxy_out, rs.rm, by="rsID", all=T)
all.res <- merge(LDproxy_out, rs.rm, by="rsID", all=T)
all.res
ldproxy_flag <- rep(NA, nrow(all.res))
ldproxy_flag
dim(all.res)
length(ldproxy_flag)
all.res$RSID_Proxy
ldproxy_flag <- rep(NA, nrow(all.res))
ldproxy_flag[(all.res$bedcov == TRUE & !is.na(all.res$RSID_Proxy))] <- "Y"
ldproxy_flag[(all.res$bedcov == TRUE & is.na(all.res$RSID_Proxy))] <- "N"
LDproxy_outl <- cbind(all.res, ldproxy_flag)
rm_flag <- rep(NA, nrow(LDproxy_outl))
rm_flag[(LDproxy_outl$ambiguous == "Y" | LDproxy_outl$ldproxy_flag == "N")] <- "Y"
rm_flag[(LDproxy_outl$ambiguous != "Y" | LDproxy_outl$ldproxy_flag != "N")] <- "N"
LDproxy_outlf <- cbind(LDproxy_outl, rm_flag)
LDproxy_outlf
is.na(LDproxy_outlf$rm_flag)
LDproxy_outlf$rm_flag[is.na(LDproxy_outlf$rm_flag)]
LDproxy_outlf$rm_flag[is.na(LDproxy_outlf$rm_flag)] <- "Y"
LDproxy_outlf
## merge with previous results
LDproxyf <- merge(LDproxy_outlf, gf_ok[,c("rsID","Freq","Effect.size")], by="rsID")
colnames(LDproxyf) <- c("INPUT.rsID", "dbSNP.CHR", "dbSNP.START", "dbSNP.REF.ALLELE", "dbSNP.ALT.ALLELE", paste(gv,".ALLELE", sep=""), "STRAND", "FLAG.AMBIGUOUS", "INPUT.RISK.ALLELE", "INPUT.RISK.TYPE", "FLAG.RISK.FLIPPED", "BED.COVERAGE", "LDPROXY.rsID", "LDPROXY.CHR", "LDPROXY.START", "LDPROXY.REF.ALLELE","LDPROXY.ALT.ALLELE", "FLAG.LDPROXY", "FLAG.RM", "INPUT.ALLELE.FREQ", "INPUT.BETA")
## order columns
interm <- LDproxyf[,c("INPUT.rsID","dbSNP.CHR","dbSNP.START","dbSNP.REF.ALLELE","dbSNP.ALT.ALLELE","GRCh37.ALLELE","STRAND","INPUT.RISK.ALLELE","FLAG.RM","FLAG.AMBIGUOUS", "BED.COVERAGE", "INPUT.RISK.TYPE","FLAG.RISK.FLIPPED","FLAG.LDPROXY","LDPROXY.rsID","LDPROXY.CHR", "LDPROXY.START","LDPROXY.REF.ALLELE","LDPROXY.ALT.ALLELE","INPUT.ALLELE.FREQ","INPUT.BETA")]
intermo <- interm[order(interm$FLAG.RM, interm$FLAG.AMBIGUOUS, interm$BED.COVERAGE, interm$FLAG.LDPROXY, interm$INPUT.RISK.TYPE, interm$FLAG.RISK.FLIPPED),]
intermo
output_name1 <- gsub(".*/","", arguments$file)
output_name1
arguments$file
arguments$file
arguments$file = "Example/Example_GWAS_Summary_file_updated_nop.csv"
arguments$file
## create output folder in setup file
## get file name from input file
output_name1 <- gsub(".*/","", arguments$file)
output_name1
output_name2 <- gsub("\\.csv","", output_name1)
output_name2
## seperte kept from removed
interm_keep <-  interm[interm$FLAG.RM == "N",]
## dbSNP change
dbSNP_ale <- interm_keep[is.na(interm_keep$FLAG.LDPROXY),]
dnSNP_final.ls <- list()
for(dbal in 1:nrow(dbSNP_ale)){
if(dbSNP_ale[dbal,"FLAG.RISK.FLIPPED"] == "N"){
INPUT.RISK.ALLELE <- dbSNP_ale[dbal,"INPUT.RISK.ALLELE"]
dnSNP_final.ls[[dbal]] <- data.frame(dbSNP_ale[dbal,c("dbSNP.CHR", "dbSNP.START", "dbSNP.REF.ALLELE")], new.INPUT.RISK.ALLELE = INPUT.RISK.ALLELE, dbSNP_ale[dbal,c("INPUT.RISK.ALLELE", "FLAG.RISK.FLIPPED","INPUT.BETA", "INPUT.ALLELE.FREQ","FLAG.LDPROXY")])
}else if(dbSNP_ale[dbal,"FLAG.RISK.FLIPPED"] == "Y"){
## flip risk allele
INPUT.RISK.ALLELE <- complement(dbSNP_ale[dbal,"INPUT.RISK.ALLELE"])
dnSNP_final.ls[[dbal]] <- data.frame(dbSNP_ale[dbal,c("dbSNP.CHR", "dbSNP.START", "dbSNP.REF.ALLELE")], new.INPUT.RISK.ALLELE = INPUT.RISK.ALLELE, dbSNP_ale[dbal,c("INPUT.RISK.ALLELE","FLAG.RISK.FLIPPED", "INPUT.BETA", "INPUT.ALLELE.FREQ","FLAG.LDPROXY")])
}
}
dnSNP_final.df <- do.call(rbind,dnSNP_final.ls)
## seperte kept from removed
interm_keep <-  interm[interm$FLAG.RM == "N",]
interm_keep
interm
all.res <- merge(LDproxy_out, rs.rm, by="rsID", all=T)
#####################
## Set filter flag ##
#####################
## ldproxy flag. NA if bedcov = FALSE, Y if becov = TRUE & !is.na(RSID_Proxy), N if becov = TRUE & is.na(RSID_Proxy)
ldproxy_flag <- rep(NA, nrow(all.res))
ldproxy_flag[(all.res$bedcov == TRUE & !is.na(all.res$RSID_Proxy))] <- "Y"
ldproxy_flag[(all.res$bedcov == TRUE & is.na(all.res$RSID_Proxy))] <- "N"
LDproxy_outl <- cbind(all.res, ldproxy_flag)
rm_flag <- rep(NA, nrow(LDproxy_outl))
rm_flag[(LDproxy_outl$ambiguous == "Y" | LDproxy_outl$ldproxy_flag == "N")] <- "Y"
rm_flag[(LDproxy_outl$ambiguous != "Y" | LDproxy_outl$ldproxy_flag != "N")] <- "N"
LDproxy_outlf <- cbind(LDproxy_outl, rm_flag)
LDproxy_outlf$rm_flag[is.na(LDproxy_outlf$rm_flag)] <- "Y"
## merge with previous results
LDproxyf <- merge(LDproxy_outlf, gf_ok[,c("rsID","Freq","Effect.size")], by="rsID")
## change column names
## write this to outfile - as intermediate file
colnames(LDproxyf) <- c("INPUT.rsID", "dbSNP.CHR", "dbSNP.START", "dbSNP.REF.ALLELE", "dbSNP.ALT.ALLELE", paste(gv,".ALLELE", sep=""), "STRAND", "FLAG.AMBIGUOUS", "INPUT.RISK.ALLELE", "INPUT.RISK.TYPE", "FLAG.RISK.FLIPPED", "BED.COVERAGE", "LDPROXY.rsID", "LDPROXY.CHR", "LDPROXY.START", "LDPROXY.REF.ALLELE","LDPROXY.ALT.ALLELE", "FLAG.LDPROXY", "FLAG.RM", "INPUT.ALLELE.FREQ", "INPUT.BETA")
## order columns
interm <- LDproxyf[,c("INPUT.rsID","dbSNP.CHR","dbSNP.START","dbSNP.REF.ALLELE","dbSNP.ALT.ALLELE","GRCh37.ALLELE","STRAND","INPUT.RISK.ALLELE","FLAG.RM","FLAG.AMBIGUOUS", "BED.COVERAGE", "INPUT.RISK.TYPE","FLAG.RISK.FLIPPED","FLAG.LDPROXY","LDPROXY.rsID","LDPROXY.CHR", "LDPROXY.START","LDPROXY.REF.ALLELE","LDPROXY.ALT.ALLELE","INPUT.ALLELE.FREQ","INPUT.BETA")]
## order rows
intermo <- interm[order(interm$FLAG.RM, interm$FLAG.AMBIGUOUS, interm$BED.COVERAGE, interm$FLAG.LDPROXY, interm$INPUT.RISK.TYPE, interm$FLAG.RISK.FLIPPED),]
intermo
all.res
LDproxy_out
merge(LDproxy_out, rs.rm, by="rsID", all=T)
rs.rm
colnames(LDproxy_out)
rs.info.na <- which(is.na(rsID_loc_df$CHR))
if(length(rs.info.na) != 0 ){
rs.rm <- rsID_loc_df[rs.info.na,] <- c("rsID", "CHR.x","START.x","REF.ALLELE.x","ALT.ALLELE.x")
colnames(rs.rm)
rsID.df <- rsID_loc_df[-rs.info.na,]
}else{
rsID.df <- rsID_loc_df
}
rs.info.na <- which(is.na(rsID_loc_df$CHR))
if(length(rs.info.na) != 0 ){
rs.rm <- rsID_loc_df[rs.info.na,]
colnames(rs.rm) <- c("rsID", "CHR.x","START.x","REF.ALLELE.x","ALT.ALLELE.x")
rsID.df <- rsID_loc_df[-rs.info.na,]
}else{
rsID.df <- rsID_loc_df
}
rs.rm
## remove NA results returned
rs.info.na <- which(is.na(rsID_loc_df$CHR))
if(length(rs.info.na) != 0 ){
rs.rm <- rsID_loc_df[rs.info.na,]
colnames(rs.rm) <- c("rsID", "CHR.x","START.x","REF.ALLELE.x","ALT.ALLELE.x")
rsID.df <- rsID_loc_df[-rs.info.na,]
}else{
rsID.df <- rsID_loc_df
}
rs.rm
rs.rm <- rsID_loc_df[rs.info.na,]
rs.rm
rsID_loc_df
## remove NA results returned
rs.info.na <- which(is.na(rsID_loc_df$CHR))
rs.info.na
rsID_loc <- list()
for (rsid in 1: length(rsIDu)){
message(paste("Getting info for : ", rsIDu[rsid],sep=""))
res <- getrsID_info(rsIDu[rsid])
rsID_loc[[rsid]] <- res
}
rsID_loc_df <- do.call(rbind, rsID_loc)
rsID_loc_df
rs.info.na <- which(is.na(rsID_loc_df$CHR))
rs.info.na
rs.info.na <- which(is.na(rsID_loc_df$CHR))
if(length(rs.info.na) != 0 ){
rs.rm <- rsID_loc_df[rs.info.na,]
colnames(rs.rm) <- c("rsID", "CHR.x","START.x","REF.ALLELE.x","ALT.ALLELE.x")
rsID.df <- rsID_loc_df[-rs.info.na,]
}else{
rsID.df <- rsID_loc_df
}
rs.rm
all.res <- merge(LDproxy_out, rs.rm, by="rsID", all=T)
all.res
LDproxy_out
colnames(LDproxy_out)
rep(NA,12)
rs.rm.df <- cbind(rs.rm,rep(NA,12))
rs.rm
rs.rm <- rsID_loc_df[rs.info.na,]
rs.rm
rep(NA,12)
cbind(rs.rm,rep(NA,12))
rs.rm.df <- cbind(rs.rm,as.vector(rep(NA,12)))
rs.rm.df <- cbind(rs.rm,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA)
rs.rm.df
colnames(rs.rm.df) <- c("rsID", "CHR.x","START.x","REF.ALLELE.x","ALT.ALLELE.x","SEQ","strand","ambiguous","Risk_allele","risk_type","flipped","bedcov","RSID_Proxy","CHR.y","START.y","REF.ALLELE.y","ALT.ALLELE.y")
rs.rm.df
all.res <- rbindLDproxy_out, rs.rm.df)
all.res <- rbind(LDproxy_out, rs.rm.df)
all.res
## ldproxy flag. NA if bedcov = FALSE, Y if becov = TRUE & !is.na(RSID_Proxy), N if becov = TRUE & is.na(RSID_Proxy)
ldproxy_flag <- rep(NA, nrow(all.res))
ldproxy_flag[(all.res$bedcov == TRUE & !is.na(all.res$RSID_Proxy))] <- "Y"
ldproxy_flag[(all.res$bedcov == TRUE & is.na(all.res$RSID_Proxy))] <- "N"
LDproxy_outl <- cbind(all.res, ldproxy_flag)
rm_flag <- rep(NA, nrow(LDproxy_outl))
rm_flag[(LDproxy_outl$ambiguous == "Y" | LDproxy_outl$ldproxy_flag == "N")] <- "Y"
rm_flag[(LDproxy_outl$ambiguous != "Y" | LDproxy_outl$ldproxy_flag != "N")] <- "N"
LDproxy_outlf <- cbind(LDproxy_outl, rm_flag)
LDproxy_outlf$rm_flag[is.na(LDproxy_outlf$rm_flag)] <- "Y"
## merge with previous results
LDproxyf <- merge(LDproxy_outlf, gf_ok[,c("rsID","Freq","Effect.size")], by="rsID")
## change column names
## write this to outfile - as intermediate file
colnames(LDproxyf) <- c("INPUT.rsID", "dbSNP.CHR", "dbSNP.START", "dbSNP.REF.ALLELE", "dbSNP.ALT.ALLELE", paste(gv,".ALLELE", sep=""), "STRAND", "FLAG.AMBIGUOUS", "INPUT.RISK.ALLELE", "INPUT.RISK.TYPE", "FLAG.RISK.FLIPPED", "BED.COVERAGE", "LDPROXY.rsID", "LDPROXY.CHR", "LDPROXY.START", "LDPROXY.REF.ALLELE","LDPROXY.ALT.ALLELE", "FLAG.LDPROXY", "FLAG.RM", "INPUT.ALLELE.FREQ", "INPUT.BETA")
## order columns
interm <- LDproxyf[,c("INPUT.rsID","dbSNP.CHR","dbSNP.START","dbSNP.REF.ALLELE","dbSNP.ALT.ALLELE","GRCh37.ALLELE","STRAND","INPUT.RISK.ALLELE","FLAG.RM","FLAG.AMBIGUOUS", "BED.COVERAGE", "INPUT.RISK.TYPE","FLAG.RISK.FLIPPED","FLAG.LDPROXY","LDPROXY.rsID","LDPROXY.CHR", "LDPROXY.START","LDPROXY.REF.ALLELE","LDPROXY.ALT.ALLELE","INPUT.ALLELE.FREQ","INPUT.BETA")]
## order rows
intermo <- interm[order(interm$FLAG.RM, interm$FLAG.AMBIGUOUS, interm$BED.COVERAGE, interm$FLAG.LDPROXY, interm$INPUT.RISK.TYPE, interm$FLAG.RISK.FLIPPED),]
intermo
is.na(LDproxy_outlf$rm_flag)
all.res
## ldproxy flag. NA if bedcov = FALSE, Y if becov = TRUE & !is.na(RSID_Proxy), N if becov = TRUE & is.na(RSID_Proxy)
ldproxy_flag <- rep(NA, nrow(all.res))
ldproxy_flag[(all.res$bedcov == TRUE & !is.na(all.res$RSID_Proxy))] <- "Y"
ldproxy_flag[(all.res$bedcov == TRUE & is.na(all.res$RSID_Proxy))] <- "N"
LDproxy_outl <- cbind(all.res, ldproxy_flag)
LDproxy_outl
rm_flag <- rep(NA, nrow(LDproxy_outl))
rm_flag[(LDproxy_outl$ambiguous == "Y" | LDproxy_outl$ldproxy_flag == "N")] <- "Y"
rm_flag[(LDproxy_outl$ambiguous != "Y" | LDproxy_outl$ldproxy_flag != "N")] <- "N"
LDproxy_outlf <- cbind(LDproxy_outl, rm_flag)
LDproxy_outlf
is.na(LDproxy_outlf$rm_flag)
LDproxy_outlf$rm_flag[is.na(LDproxy_outlf$rm_flag)] <- "Y"
LDproxy_outlf
## merge with previous results
LDproxyf <- merge(LDproxy_outlf, gf_ok[,c("rsID","Freq","Effect.size")], by="rsID")
## change column names
## write this to outfile - as intermediate file
colnames(LDproxyf) <- c("INPUT.rsID", "dbSNP.CHR", "dbSNP.START", "dbSNP.REF.ALLELE", "dbSNP.ALT.ALLELE", paste(gv,".ALLELE", sep=""), "STRAND", "FLAG.AMBIGUOUS", "INPUT.RISK.ALLELE", "INPUT.RISK.TYPE", "FLAG.RISK.FLIPPED", "BED.COVERAGE", "LDPROXY.rsID", "LDPROXY.CHR", "LDPROXY.START", "LDPROXY.REF.ALLELE","LDPROXY.ALT.ALLELE", "FLAG.LDPROXY", "FLAG.RM", "INPUT.ALLELE.FREQ", "INPUT.BETA")
## order columns
interm <- LDproxyf[,c("INPUT.rsID","dbSNP.CHR","dbSNP.START","dbSNP.REF.ALLELE","dbSNP.ALT.ALLELE","GRCh37.ALLELE","STRAND","INPUT.RISK.ALLELE","FLAG.RM","FLAG.AMBIGUOUS", "BED.COVERAGE", "INPUT.RISK.TYPE","FLAG.RISK.FLIPPED","FLAG.LDPROXY","LDPROXY.rsID","LDPROXY.CHR", "LDPROXY.START","LDPROXY.REF.ALLELE","LDPROXY.ALT.ALLELE","INPUT.ALLELE.FREQ","INPUT.BETA")]
## order rows
intermo <- interm[order(interm$FLAG.RM, interm$FLAG.AMBIGUOUS, interm$BED.COVERAGE, interm$FLAG.LDPROXY, interm$INPUT.RISK.TYPE, interm$FLAG.RISK.FLIPPED),]
intermo
output_name1 <- gsub(".*/","", arguments$file)
output_name2 <- gsub("\\.csv","", output_name1)
rm_output_file <- paste("Results/", output_name2, "_Intermediate_results2.csv", sep="")
write.table(intermo,rm_output_file, sep=",", row.names=F, quote=F)
## No recalculation of offset currently
if(is.null(arguments$offset)){
offset <- 0
}else{
offset <- arguments$offset
}
interm_keep <-  interm[interm$FLAG.RM == "N",]
## dbSNP change
dbSNP_ale <- interm_keep[is.na(interm_keep$FLAG.LDPROXY),]
dnSNP_final.ls <- list()
for(dbal in 1:nrow(dbSNP_ale)){
if(dbSNP_ale[dbal,"FLAG.RISK.FLIPPED"] == "N"){
INPUT.RISK.ALLELE <- dbSNP_ale[dbal,"INPUT.RISK.ALLELE"]
dnSNP_final.ls[[dbal]] <- data.frame(dbSNP_ale[dbal,c("dbSNP.CHR", "dbSNP.START", "dbSNP.REF.ALLELE")], new.INPUT.RISK.ALLELE = INPUT.RISK.ALLELE, dbSNP_ale[dbal,c("INPUT.RISK.ALLELE", "FLAG.RISK.FLIPPED","INPUT.BETA", "INPUT.ALLELE.FREQ","FLAG.LDPROXY")])
}else if(dbSNP_ale[dbal,"FLAG.RISK.FLIPPED"] == "Y"){
## flip risk allele
INPUT.RISK.ALLELE <- complement(dbSNP_ale[dbal,"INPUT.RISK.ALLELE"])
dnSNP_final.ls[[dbal]] <- data.frame(dbSNP_ale[dbal,c("dbSNP.CHR", "dbSNP.START", "dbSNP.REF.ALLELE")], new.INPUT.RISK.ALLELE = INPUT.RISK.ALLELE, dbSNP_ale[dbal,c("INPUT.RISK.ALLELE","FLAG.RISK.FLIPPED", "INPUT.BETA", "INPUT.ALLELE.FREQ","FLAG.LDPROXY")])
}
}
dnSNP_final.df <- do.call(rbind,dnSNP_final.ls)
ldproxy_ale <- interm_keep[(interm_keep$FLAG.LDPROXY == "Y" & !is.na(interm_keep$FLAG.LDPROXY)),]
LDPROXY_final.ls <- list()
for(alle in 1:nrow(change_ale)){
## if not flipped REF or ALT doesn't matter
if(change_ale[alle,"INPUT.RISK.TYPE"] == "REF"){
LDPROXY_final.ls[[alle]] <- ldproxy_ale[alle,c("LDPROXY.CHR", "LDPROXY.START", "LDPROXY.REF.ALLELE", "LDPROXY.REF.ALLELE","INPUT.RISK.TYPE","INPUT.BETA", "INPUT.ALLELE.FREQ", "FLAG.LDPROXY")]
} else if(change_ale[alle,"INPUT.RISK.TYPE"] == "ALT"){
LDPROXY_final.ls[[alle]] <- ldproxy_ale[alle,c("LDPROXY.CHR", "LDPROXY.START", "LDPROXY.REF.ALLELE", "LDPROXY.ALT.ALLELE","INPUT.RISK.TYPE","INPUT.BETA", "INPUT.ALLELE.FREQ", "FLAG.LDPROXY")]
}
colnames(LDPROXY_final.ls[[alle]]) <- c("LDPROXY.CHR","LDPROXY.START","LDPROXY.REF.ALLELE","new.RISK.ALLELE","INPUT.RISK.TYPE","INPUT.BETA","INPUT.ALLELE.FREQ","FLAG.LDPROXY")
}
LDPROXY_final.df <- do.call(rbind,LDPROXY_final.ls)
LDPROXYfdf <- LDPROXY_final.df[,c(1:4,6:7)]
dnSNPfdf <- dnSNP_final.df[,c(1:4,7:8)]
colnames(LDPROXYfdf) <- NA
colnames(dnSNPfdf) <- NA
final <- rbind(LDPROXYfdf,dnSNPfdf)
## for nimpress compatibility
final[is.na(final[,6]),6] <- "NaN"
final
## setup output file
filen <- paste("Results/", output_name2, "_NIMPRESS_input.txt", sep="")
## title
write(output_name2,file=filen, append=FALSE)
## description
write(arguments$description,file=filen, append=TRUE)
## citation
write(arguments$citation,file=filen, append=TRUE)
## genome version
write(gv,file=filen, append=TRUE)
## ofset
write(offset,file=filen, append=TRUE)
write.table(final, file=filen, sep="\t", row.names = FALSE, col.names = FALSE, quote = FALSE, append=TRUE)
is.null(arguments$output)
?mkdir
outdir <- "/Nimpress_preprocess_Output"
dir.create(file.path(outdir), showWarnings = FALSE)
file.path(outdir)
file.path(getwd(),outdir)
output_name1 <- gsub(".*/","", arguments$file)
output_name2 <- gsub("\\.csv","", output_name1)
if(is.null(arguments$output)){
outdir <- "Nimpress_preprocess_Output"
dir.create(file.path(getwd(),outdir), showWarnings = FALSE)
}else{
outdir <- arguments$output
dir.create(file.path(outdir), showWarnings = FALSE)
}
rm_output_file <- paste(outdir, output_name2, "_Intermediate_results.csv", sep="")
write.table(intermo,rm_output_file, sep=",", row.names=F, quote=F)
rm_output_file <- paste(outdir,"/", output_name2, "_Intermediate_results.csv", sep="")
write.table(intermo,rm_output_file, sep=",", row.names=F, quote=F)
arguments$blacklisted_regions_file
arguments$blacklisted_regions_file = "/Users/ewilkie/Documents/Work/CCI/CCI_general_data_files/GRCh37_alldifficultregions.tier3.sorted.merged.sorted.bed"
file.path(getwd(),"Suppl/")
getwd()
?gzfile
url <- "ftp://ftp-trace.ncbi.nlm.nih.gov/giab/ftp/release/genome-stratifications/v2.0/GRCh37/union/GRCh37_alldifficultregions.bed.gz"
tmp <- tempfile()
download.file(url,tmp)
tmp
gr <- bedfile_to_Granges(gzfile(tmp))
gzfile(tmp)
data <- read.csv(
gzfile(tmp),
sep="\t",
header=TRUE,
stringsAsFactors=FALSE)
data <- read.csv(
gzfile(tmp)
)
head(data)
data <- fread(gzfile(tmp),sep="\t", header=TRUE,stringsAsFactors=FALSE)
data <- read.table(gzfile(tmp),sep="\t", header=TRUE,stringsAsFactors=FALSE)
data <- read.csv(gzfile(tmp),sep="\t", header=TRUE,stringsAsFactors=FALSE)
read.csv()
?read.csv
data <- read.csv(gzfile(tmp),sep="\t", header=TRUE,stringsAsFactors=FALSE, skip=1 )
head(data)
data <- read.csv(gzfile(tmp),sep="\t", header=F,stringsAsFactors=FALSE, skip=1 )
bedfile <- arguments$blacklisted_regions_file
bedfile
cust.bed <- fread(bedfile,sep="\t", header=TRUE,stringsAsFactors=FALSE)
gr <- bedfile_to_Granges(cust.bed)
cust.bed
ovlp <- cust.bed
colnames(ovlp) <- c("chr", "start", "end")
head(ovlp)
ovlp.df <- as.data.frame(ovlp)
head(ovlp.df)
gr <- makeGRangesFromDataFrame(ovlp.df, keep.extra.columns = TRUE,starts.in.df.are.0based=TRUE)
url <- "ftp://ftp-trace.ncbi.nlm.nih.gov/giab/ftp/release/genome-stratifications/v2.0/GRCh37/union/GRCh37_alldifficultregions.bed.gz"
tmp <- tempfile()
download.file(url,tmp)
giab.bed <- read.csv(gzfile(tmp),sep="\t", header=F,stringsAsFactors=FALSE, skip=1 )
bedfile_to_Granges <- function(ovlp){
ovlp.df <- as.data.frame(ovlp)
colnames(ovlp.df) <- c("chr", "start", "end")
gr <- makeGRangesFromDataFrame(ovlp.df, keep.extra.columns = TRUE,starts.in.df.are.0based=TRUE)
}
gr <- bedfile_to_Granges(giab.bed)
install.packages("pacman")
remove.packages("pacman")
## turn warnings off
oldw <- getOption("warn")
options(warn = -1)
install.packages("pacman")
